float fr;
int videoScale = 300;
int n = 3;
boolean inicio = true;
int nivel = 1;
void setup(){
 size(900,900); 
 fr = 30; //frameRate;  

}

void draw(){

  // Polígono regular de N lados inscrito em um círculo -> Falta o cículo inscrito
  fill(250);
  rect(0*videoScale, 0*videoScale, videoScale, videoScale);
  drawA();

  
  // Koch -> Falta fechar ele 
  float ax, ay, bx, by;
  ax = 310;
  ay = 100;
  bx = 590;
  by = 100;
  if (frameCount%(2*int(frameRate)) == 0){
   if (nivel > 6){
      nivel = 0;
   }
   nivel++;
  }
  fill(0,0,250);
  rect(1*videoScale, 0*videoScale, videoScale, videoScale);
  drawB(ax,ay,bx,by,nivel);
  //drawB(100,100,590,100,nivel);
  
  
  // Sol e Lua 
  fill(0,0,50);
  rect(2*videoScale, 0*videoScale, videoScale, videoScale);
  drawC();
  
  
  // Rastro da Lua 
  noFill();
  rect(0*videoScale, 1*videoScale, videoScale, videoScale);
  //drawD();
  
  
  // Sol e Lua + Sistema Solar
  fill(0,110,150);
  rect(1*videoScale, 1*videoScale, videoScale, videoScale);
  //drawE();
  
  
  fill(200,250,200);
  rect(2*videoScale, 1*videoScale, videoScale, videoScale);
  //drawF();
  
  
  fill(150,0,150);
  rect(0*videoScale, 2*videoScale, videoScale, videoScale);
  //drawG();
  
  
  fill(150,255,150);
  rect(1*videoScale, 2*videoScale, videoScale, videoScale);
  //drawH1();
  
  fill(100,200,150);
  rect(2*videoScale, 2*videoScale, videoScale, videoScale);
  //drawH2();
  
}

// Polígono regular de N lados inscrito em um círculo.
void drawA(){
  pushMatrix();
  
  translate(150,150);
  float a = TWO_PI/n;
  int r = 100;
  if (frameCount%(2*int(frameRate)) == 0){
    if (n > 12){
      n=2;
    }
    n++;
  }
  beginShape();
  for(int i=0; i < n; i++)
  {
    float x = r*cos(i*a);
    float y = r*sin(i*a);
    vertex(x,y);
  }
  endShape(CLOSE);
  popMatrix();
}

// Koch
void drawB(float Ax, float Ay, float Bx, float By, int nivel){
    //pushMatrix();
    float ax, ay, bx, by;
    float cx, cy, dx, dy, ex, ey;
    
    ax = Ax;
    ay = Ay;
    bx = Bx;
    by = By;
    
    
    if(nivel == 0){
     line(ax,ay,bx,by);
     return;
    }

    cx = (bx-ax)*1/3 + ax ;
    cy = (by-ay)*1/3 + ay;

    dx = (bx-ax)*2/3 + ax;
    dy = (by-ay)*2/3 + ay;

    ex = ((dx-cx)*cos(PI/3) + (dy-cy)*sin(PI/3) )+cx;
    ey = ((dy-cy)*cos(PI/3) - (dx-cx)*sin(PI/3) )+cy;

    drawB(ax,ay,cx,cy,nivel-1);
    drawB(cx,cy,ex,ey,nivel-1);
    drawB(ex,ey,dx,dy,nivel-1);
    drawB(dx,dy,bx,by,nivel-1);
    
    //popMatrix();
}

// Sol e Lua 
void drawC (){
  pushMatrix();
  translate(0,0);
  translate(videoScale*2+150,150);
  fill(255, 204, 0);
  circle(0,0,50);
  rotate(frameCount*(TWO_PI)/(60*20));
  translate(100,0);
  fill(0,0,205);
  circle(0,0,20);
  rotate(frameCount*(TWO_PI)/(60*5));
  translate(30,0);
  fill(255);
  circle(0,0,3);
  popMatrix();
  
}

// Rastro Lunar
void drawD(){
  
  pushMatrix();
  translate(0,0);
  translate(150,450);
  rotate(frameCount*(TWO_PI)/(60*20));
  translate(100,0);
  rotate(frameCount*(TWO_PI)/(60*5));
  translate(30,0);
  fill(100);
  circle(0,0,5);
  popMatrix();
 
}

// Mini Sistema Solar
void drawE(){
  
  pushMatrix();
  translate(videoScale*1+150,videoScale*1+150);
  noStroke();
  fill(255, 204, 0);
  circle(0,0,50);
  
  //Mercúrio
  pushMatrix();
  rotate(frameCount*(TWO_PI)/(60*6));
  translate(55,0);
  fill(100);
  circle(0,0,10);
  popMatrix();
  
  // Vênus
  pushMatrix();
  rotate(frameCount*(TWO_PI)/(60*8));
  translate(75,0);
  fill(250,100,0);
  circle(0,0,15);
  popMatrix();
  
  // Terra
  pushMatrix();
  rotate(frameCount*(TWO_PI)/(60*10));
  translate(100,0);
  fill(0,0,255);
  circle(0,0,20);
  rotate(frameCount*(TWO_PI)/(60*5));
  translate(15,0);
  fill(255);
  circle(0,0,3);
  popMatrix();
  
  // Marte
  pushMatrix();
  rotate(frameCount*(TWO_PI)/(60*10+10));
  translate(130,0);
  fill(205,50,0);
  circle(0,0,17);
  popMatrix();

  popMatrix();  
}

//void drawF(){}

//void drawG(){}

//void drawH1(){}

//void drawH2(){}
