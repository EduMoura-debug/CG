/*--- GLOBAIS ---*/

float fr;
int videoScale = 300;

int n = 3;

//A e B
float a = TWO_PI/n;
int r = 100;
  
// B
int nivel = 1;

// H
float xpos, ypos;    // Starting position of shape    
float xspeed = 7;  //random(3,6.5);  // Speed of the shape
float yspeed = 6;  //random(3,5.5);  // Speed of the shape
float xdirection = 1;  // Left or Right
float ydirection = 1;

/*--- SETUP ---*/
void setup(){
 size(900,900); 
 fr = 30; //frameRate;  
 frameRate(fr);
 xpos = random(videoScale*2-150,videoScale*2+150);
 ypos = videoScale*2+150; 
}

/*--- DRAW ---*/
void draw(){

  // Polígono regular de N lados inscrito em um círculo.
  fill(250,100,100);
  rect(0*videoScale, 0*videoScale, videoScale, videoScale);
  drawA();

  
  // Koch -> Falta fechar ele 
  float ax, ay, bx, by, cx, cy;
    ax = r*cos(1*a);
    ay = r*sin(1*a);
    bx = r*cos(2*a);
    by = r*sin(2*a);
    cx = r*cos(3*a);
    cy = r*sin(3*a);
  if (frameCount%(2*int(frameRate)) == 0){
   if (nivel > 6){
      nivel = 0;
   }
   nivel++;
  }
  fill(100,200,250);
  rect(1*videoScale, 0*videoScale, videoScale, videoScale);
  drawB(ax,ay,bx,by,nivel);
  //drawB(100,100,590,100,nivel);
  
  
  // Sol e Lua 
  fill(0,0,50);
  rect(2*videoScale, 0*videoScale, videoScale, videoScale);
  drawC();
  
  
  // Rastro da Lua 
  noFill();
  rect(0*videoScale, 1*videoScale, videoScale, videoScale);
  drawD();
  
  
  // Sol e Lua + Sistema Solar
  fill(0,110,150);
  rect(1*videoScale, 1*videoScale, videoScale, videoScale);
  drawE();
  
  
  fill(250,250,200);
  rect(2*videoScale, 1*videoScale, videoScale, videoScale);
  //drawF();
  
  
  fill(150,0,150);
  rect(0*videoScale, 2*videoScale, videoScale, videoScale);
  //drawG();
  
  //rect(1*videoScale, 2*videoScale, videoScale*2, videoScale);  
  fill(50,200,50);
  rect(1*videoScale, 2*videoScale, videoScale, videoScale);
  fill(150,200,50);
  rect(2*videoScale, 2*videoScale, videoScale, videoScale);
  
  
  fill(255);
  rect(3*videoScale-30, 2*videoScale+100, 30, 100);
  rect(1*videoScale, 2*videoScale+100, 30, 100);
  
  noFill();
  ellipse(2*videoScale, 2*videoScale+150, 60, 60);
  
    drawH();
}

// Polígono regular de N lados inscrito em um círculo.
void drawA(){
  pushMatrix();
  
  translate(150,150);

  if (frameCount%(2*int(frameRate)) == 0){
    if (n > 12){
      n=2;
    }
    n++;
  }
  beginShape();
  for(int i=0; i < n; i++)
  {
    float x = r*cos(i*a);
    float y = r*sin(i*a);
    vertex(x,y);
  }
  endShape(CLOSE);
  popMatrix();
}

// Koch
void drawB(float Ax, float Ay, float Bx, float By, float Cx, float Cy, int nivel){ //Fazer triangulo
//pushMatrix();
    float ax, ay, bx, by;
    float cx, cy, dx, dy, ex, ey;

    
    ax = r*cos(1*a);
    ay = r*sin(1*a);
    bx = r*cos(2*a);
    by = r*sin(2*a);
    cx = r*cos(3*a);
    cy = r*sin(3*a);
    
    if(nivel == 0){
     line(ax,ay,bx,by);
     return;
    }
    

    drawB(ax,ay,cx,cy,nivel-1);
    drawB(cx,cy,bx,by,nivel-1);
    drawB(bx,by,ax,ay,nivel-1);
    
//popMatrix();
}

// Sol e Lua 
void drawC (){
  pushMatrix();
  translate(0,0);
  translate(videoScale*2+150,150);
  fill(255, 204, 0);
  circle(0,0,50);
  rotate(frameCount*(TWO_PI)/(60*20));
  translate(100,0);
  fill(0,0,205);
  circle(0,0,20);
  rotate(frameCount*(TWO_PI)/(60*5));
  translate(30,0);
  fill(255);
  circle(0,0,4);
  popMatrix();
  
}

// Rastro Lunar
void drawD(){
  
  pushMatrix();
  translate(0,0);
  translate(150,450);
  rotate(frameCount*(TWO_PI)/(60*20));
  translate(100,0);
  rotate(frameCount*(TWO_PI)/(60*5));
  translate(30,0);
  fill(100);
  circle(0,0,5);
  popMatrix();
 
}

// Mini Sistema Solar
void drawE(){
  
  pushMatrix();
  translate(videoScale*1+150,videoScale*1+150);
  //noStroke();
  fill(255, 204, 0);
  circle(0,0,50); 
  
  //Mercúrio
  pushMatrix();
  rotate(frameCount*(TWO_PI)/(60*6));
  translate(50,0);
  fill(100);
  circle(0,0,10);
  popMatrix();
  
  // Vênus
  pushMatrix();
  rotate(frameCount*(TWO_PI)/(60*8));
  translate(70,0);
  fill(250,100,0);
  circle(0,0,15);
  popMatrix();
  
  // Terra
  pushMatrix();
  rotate(frameCount*(TWO_PI)/(60*10));
  translate(100,0);
  fill(0,0,255);
  circle(0,0,20);
  rotate(frameCount*(TWO_PI)/(60*5));
  translate(15,0);
  fill(255);
  circle(0,0,4);
  popMatrix();
 
  // Marte
  pushMatrix();
  rotate(frameCount*(TWO_PI)/(60*10+10));
  translate(133,0);
  fill(205,50,0);
  circle(0,0,17);
  popMatrix();


popMatrix();

}

//
void drawF(){
/*
x(u) = (cos(u) * (exp(cos(u)) - 2 * cos(4 * u) - pow(sin(u/12),5)))
y(u) = (sin(u) * (exp(cos(u)) - 2 * cos(4 * u) - pow(sin(u/12),5)))
)
*/
pushMatrix();  

float u = frameCount;
float p1x = videoScale*2+50;
float p1y = videoScale+150;
float p2x = (cos(u) * (exp(cos(u)) - 2 * cos(4 * u) - sin(pow((u/12),5))));
float p2y = (sin(u) * (exp(cos(u)) - 2 * cos(4 * u) - sin(pow((u/12),5))));
float p3x = videoScale*3-10;
float p3y = videoScale+150;
fill(0);
beginShape();
  vertex(p1x, p1y);
  for(float t = 0; t <= 1; t += 0.01)
  {
    float ax = p1x + t*(p2x-p1x);
    float bx = p2x + t*(p3x-p2x);
    float cx = ax + t*(bx-ax);
    float ay = p1y + t*(p2y-p1y);
    float by = p2y + t*(p3y-p2y);
    float cy = ay + t*(by-ay);
    vertex(cx,cy);  
  }
  vertex(p3x, p3y);
  endShape(CLOSE);
  /*
  bezier(p1x,p1y,p2x,p2y,p3x,p3y);
*/

popMatrix();  
}

void drawG(){
  /*
  r(θ) = R*(1 + acos(2θ + ϕ1) + bcos(3θ + ϕ2))
  a + b < 1;
  θ em [0, 2π]
  R, ϕ1 e ϕ2 -> valores fixos, ver o que estão controlando
  */
pushMatrix();


popMatrix();  
}


void drawH(){ // criar bolas azuis e vermelhas + dar velocidade e checar se elas vão sair do retangulo
   
  xpos = xpos + ( xspeed * xdirection );
  ypos = ypos + ( yspeed * ydirection ); 
  
  
  if (xpos > 900-15 || xpos < videoScale*1+15) {
    xdirection *= -1;
    //xspeed+=1;
    drawH();
     
}
  if (ypos > 900-15 || ypos < videoScale*2+15) {
    ydirection *= -1;
    //yspeed+=1;
    
  }
  
  if( xpos > 600){
    fill(255,0,0);
  }else{
    fill(0,0,255);
  }
  ellipse(xpos, ypos, 30, 30);
}
